var f="9";var b={4:{width:2,height:2,lowerSize:4,higherSize:8},6:{width:3,height:2,lowerSize:9,higherSize:18},8:{width:2,height:4,lowerSize:18,higherSize:36},9:{width:3,height:3,lowerSize:17,higherSize:40}};var m=class n{constructor(e={}){this.setBoard=e=>{this.grid=e};let t;e.grid?t=e.grid.length.toString():t=e.mode||f,this.mode=b[t],this.blockSize=this.mode.width*this.mode.height,this.numbers=[...Array(this.blockSize)].map((r,o)=>o+1),this.grid=e.grid||this.defaultGrid()}reset(){this.grid=this.defaultGrid()}defaultGrid(){return[...Array(this.blockSize)].map(()=>Array(this.blockSize).fill(0))}get(e,t){return this.grid[t][e]}set(e,t,r){if(r){if(this.get(e,t)===r)return r;if(!this.allowedNumbersInRow(t).includes(r))throw new Error(`${r} is not allowed in the row ${t}`);if(!this.allowedNumbersInColumn(e).includes(r))throw new Error(`${r} is not allowed in the column ${e}`);if(!this.allowedNumbersInBlock(e,t).includes(r))throw new Error(`${r} is not allowed in the block ${t}`)}return this.grid[t][e]=r}row(e){return this.grid[e]}column(e){return this.grid.map(t=>t[e])}allowedNumbersInRow(e){let t=this.row(e);return this.numbers.filter(r=>!t.includes(r))}allowedNumbersInColumn(e){let t=this.column(e);return this.numbers.filter(r=>!t.includes(r))}allowedNumbersInBlock(e,t){let{width:r,height:o}=this.mode,i=Math.floor(e/r)*r,s=Math.floor(t/o)*o,u=[];for(let l=0;l<r;l++)for(let d=0;d<o;d++)u.push(this.get(i+l,s+d));return this.numbers.filter(l=>!u.includes(l))}allowedNumbers(e,t){let r=this.allowedNumbersInBlock(e,t),o=this.allowedNumbersInRow(t),i=this.allowedNumbersInColumn(e);return r.filter(s=>o.includes(s)&&i.includes(s))}emptyCells(){let e=[];return this.grid.forEach((t,r)=>{t.forEach((o,i)=>{o||e.push([i,r])})}),e}anyEmptyCell(){let e=[-1,-1],t=this.blockSize+1;for(let[r,o]of this.emptyCells()){let i=this.allowedNumbers(r,o).length;i<t&&(e=[r,o],t=i)}return e}isSolved(){return this.grid.every(e=>e.every(t=>t!==0))}solveUltimately(){if(this.isSolved())return!0;let[e,t]=this.anyEmptyCell(),r=this.allowedNumbers(e,t);for(let o of r){if(this.set(e,t,o),this.solveUltimately())return!0;this.set(e,t,0)}return!1}solve(){let e=this.grid.map(t=>[...t]);return this.solveUltimately()?this.grid:(this.grid=e,null)}getCount(){return this.grid.reduce((e,t)=>e+t.filter(r=>r!==0).length,0)}getDifficulty(){let e=this.getCount();return e>=40?"Easy":e>=25?"Medium":"Hard"}generateFullSolution(){this.reset();let e=()=>{let[t,r]=this.anyEmptyCell();if(t===-1||r===-1)return!0;let o=this.numbers.slice().sort(()=>Math.random()-.5);for(let i of o){try{if(this.set(t,r,i),e())return!0}catch{}this.set(t,r,0)}return!1};return e()}digHoles(e){let r=this.blockSize**2-e,o=[];for(let i=0;i<this.blockSize;i++)for(let s=0;s<this.blockSize;s++)o.push([s,i]);o.sort(()=>Math.random()-.5);for(let[i,s]of o){let u=this.get(i,s);this.set(i,s,0);let l=new n({grid:this.grid.map(h=>[...h])}),d=0,a=()=>{if(l.isSolved())return d++,d>1;let[h,c]=l.anyEmptyCell(),w=l.allowedNumbers(h,c);for(let y of w){try{if(l.set(h,c,y),a())return!0}catch{}l.set(h,c,0)}return!1};if(a())this.set(i,s,u);else if(r--,r<=0)break}}generate(e=null){let t={Easy:40+Math.floor(Math.random()*10),Medium:28+Math.floor(Math.random()*10),Hard:17+Math.floor(Math.random()*5)},r=e?t[e]:30+Math.floor(Math.random()*30),o=5;for(;o-- >0;){if(!this.generateFullSolution())continue;let i=this.grid.map(u=>[...u]);this.digHoles(r);let s=this.getDifficulty();if(!e||s===e)return;this.grid=i}throw new Error("Failed to generate puzzle with requested difficulty")}};var p=n=>{let e=new m;return e.setBoard(n),e.solve()},S=(n="Medium")=>{let e=new m({mode:"9"});e.generate(n);let t=e.grid;return{value:t,default:structuredClone(t),solution:p(structuredClone(t)),difficulty:e.getDifficulty()}},M=(n="Medium")=>{for(let t=0;t<100;t++){let r=S(n);if(!n||r.difficulty.toLowerCase()===n.toLowerCase())return r}throw new Error(`Could not generate a board with difficulty "${n}" after 100 tries.`)},k=(n="Medium")=>{try{return{grid:M(n),message:"All Ok"}}catch(e){return{message:e.toString(),grid:null}}},g=(n="Medium")=>({newboard:k(n)});addEventListener("message",n=>{let e=n.data.difficulty;postMessage(g(e))});
